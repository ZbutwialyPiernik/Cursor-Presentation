---
description: 
globs: 
alwaysApply: false
---
## Tech Stack
- Jest (testing framework)
- Mock objects with `jest.Mocked<T>`

## Test Structure Organization

### **Test Suite Grouping**
- **Use descriptive describe blocks** that clearly categorize test scenarios
- **Standard categories**: "Happy Path", "Input Validation", "Edge Cases", "Error Handling"
- **Nest related tests** logically within appropriate describe blocks

### **Individual Test Structure**
- **Use AAA Pattern** with explicit comments: `// Arrange`, `// Act`, `// Assert`
- **Descriptive test names** that explain the scenario and expected outcome
- **One assertion concept per test** - avoid testing multiple unrelated behaviors

## Mock Management

### **Setup and Teardown**
- **Initialize mocks in beforeEach** for consistency across tests
- **Clear all mocks in afterEach** to prevent test pollution
- **Use typed mocks** with `jest.Mocked<InterfaceName>` for type safety

## Helper Function Patterns

### **Expectation Helpers**
- **Create reusable assertion functions** for common success/failure patterns
- **Name helpers descriptively**: `expectSuccess`, `expectFailureWithMessage`, `expectNoExternalCalls`
- **Include all relevant assertions** in helper functions to reduce duplication

## Input Validation Testing

### **Comprehensive Field Testing**
- **Test each required field individually** with invalid values
- **Use consistent test data** with a base valid request object
- **Verify no external calls** are made when validation fails

## Example: AAA Pattern

```typescript
it('should return error when amount is zero', async () => {
  // Arrange
  const invalidRequest = { ...validRequest, amount: 0 };

  // Act
  const result = await useCase.execute(invalidRequest);

  // Assert
  expect(result.success).toBe(false);
  expect(result.errorMessage).toBe('Invalid request parameters');
});
```
